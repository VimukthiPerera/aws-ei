# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 Enterprise Integrator Clustered deployment
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - AWSAccessKeyId
          - AWSAccessKeySecret
          - KeyPairName
          - WSO2InstanceType
          - OperatingSystem
      - Label:
          default: Network Configuration
        Parameters:
          - CertificateName
      - Label:
          default: Database Configuration
        Parameters:
          - DBUsername
          - DBPassword
          - DBAllocationStorage
          - DBInstanceType
          - DB
      - Label:
          default: Other Configuration
        Parameters:
          - CustomUserData
          - JDK
      - Label:
          default: WUM Credentials
        Parameters:
          - WUMUsername
          - WUMPassword
    ParameterLabels:
      AWSAccessKeyId:
        default: AWS Access Key ID
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      CertificateName:
        default: SSL Certificate Name
      KeyPairName:
        default: Key Pair Name
      DBUsername:
        default: Username
      DBPassword:
        default: Password
      DBAllocationStorage:
        default: Allocation Storage
      DBInstanceType:
        default: Class Type
      DB:
        default: Engine Type
      JDK:
        default: JDK Version
      InternalPrepareForTest:
        default: Enable Test Mode
      CustomUserData:
        default: Customer User Data
      WUMUsername:
        default: Username
      WUMPassword:
        default: Password
      WSO2InstanceType:
        default: Instance Type
      DB:
        default: DB Engine
      OperatingSystem:
        default: OS Version
Resources:
  # networking configurations
  WSO2EIVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  WSO2EIPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2EIPublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WSO2EIVPC
        CidrBlock: 10.0.252.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
  WSO2EIPublicInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  WSO2EIPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2EIVPC
  WSO2EIPublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      SubnetId: !Ref WSO2EIPublicSubnet1
  WSO2EIPublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      SubnetId: !Ref WSO2EIPublicSubnet2
  WSO2EIPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      GatewayId: !Ref WSO2EIPublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: WSO2EIVPCInternetGatewayAttachment
  WSO2EIVPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref WSO2EIPublicInternetGateway
      VpcId: !Ref WSO2EIVPC
  WSO2EIPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2EIPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  WSO2EIPrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2EIVPC
  WSO2EIPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WSO2EINATGateway
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
  WSO2EIPrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
      SubnetId: !Ref WSO2EIPrivateSubnet1
  WSO2EIPrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
      SubnetId: !Ref WSO2EIPrivateSubnet2
  WSO2EINATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - WSO2EIEIP
        - AllocationId
      SubnetId: !Ref WSO2EIPublicSubnet1
  WSO2BastionEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt WSO2BastionEIP.AllocationId
      InstanceId: !Ref WSO2BastionInstance
  WSO2EIEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  WSO2BastionEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  # database configurations
  WSO2EIDBInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: DB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  WSO2EIDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      VPCSecurityGroups:
        - !Ref WSO2EIDBInstanceSecurityGroup
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: WSO2EIDBInstance
      DBName: WSO2_EI_DB
      Engine: !Select [0, !Split ["-", !Ref DB]]
      EngineVersion: !Select [1, !Split ["-", !Ref DB]]
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'false'
      StorageType: gp2
      DBSubnetGroupName: !Ref WSO2EIDBSubnetGroup
  WSO2EIDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref WSO2EIPrivateSubnet1
        - !Ref WSO2EIPrivateSubnet2
  # File system configurations
  WSO2EIEFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  WSO2EIEFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
  WSO2EIPrivateSubnet1EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2EIPrivateSubnet1
      FileSystemId: !Ref WSO2EIEFSFileSystem
      SecurityGroups:
        - !Ref WSO2EIEFSSecurityGroup
  WSO2EIPrivateSubnet2EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2EIPrivateSubnet2
      FileSystemId: !Ref WSO2EIEFSFileSystem
      SecurityGroups:
        - !Ref WSO2EIEFSSecurityGroup
  # Product configurations
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 Bastion node Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WSO2EISecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 Enterprise Integrator Security Group
      GroupName: WSO2SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '5672'
          ToPort: '5672'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '4100'
          ToPort: '4100'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
  WSO2BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2EIAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: WSO2BastionInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EIPublicSubnet1
          GroupSet:
            - !Ref BastionSecurityGroup
  PuppetMaster:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2PuppetMasterRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: !Ref WSO2InstanceType
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: PuppetMasterInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EIPrivateSubnet1
          GroupSet:
            - !Ref PuppetMasterSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          #cloud-boothook
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          echo "> Set hostname to puppetmaster"
          hostname puppetmaster
          echo $(hostname) >> /etc/hostname
          echo "127.0.0.1 $(hostname)" >> /etc/hosts
          sed -i '/\[main\]/a dns_alt_names=puppetmaster,puppet' /etc/puppet/puppet.conf
          sed -i '/\[master\]/a autosign=true' /etc/puppet/puppet.conf
          export ProductVersion=6.4.0
          service puppetmaster restart
          ./home/ubuntu/wso2-init.sh ${WUMUsername} ${WUMPassword} wso2ei-640 ${InternalPrepareForTest}
          sed -i "s/access-key/${AWSAccessKeyId}/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s/REGION_NAME/${AWS::Region}/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s/CF_ELB_DNS_NAME/${WSO2EILoadBalancer.DNSName}/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s/CF_DB_USERNAME/${DBUsername}/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s/CF_DB_PASSWORD/${DBPassword}/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s/CF_RDS_URL/${WSO2EIDBInstance.Endpoint.Address}/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s/BROKER_ELB_DNS_NAME/'localhost'/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s^secretkey^${AWSAccessKeySecret}^g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s/JDK_TYPE/${JDK}/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          export DB_HOSTNAME=${WSO2EIDBInstance.Endpoint.Address}
          export DB_PORT=${WSO2EIDBInstance.Endpoint.Port}
          export DB_USERNAME=${DBUsername}
          export DB_PASSWORD=${DBPassword}
          sed -i "s/JDK_TYPE/${JDK}/g" /etc/puppet/code/environments/production/modules/ei_integrator640/manifests/params.pp
          sed -i "s/CF_DB_USERNAME/${DBUsername}/g" /usr/local/bin/provision_db_ei.sh
          sed -i "s/CF_DB_PASSWORD/${DBPassword}/g" /usr/local/bin/provision_db_ei.sh
          sed -i "s/CF_DB_HOST/${WSO2EIDBInstance.Endpoint.Address}/g" /usr/local/bin/provision_db_ei.sh
          sed -i "s/CF_DB_PORT/${WSO2EIDBInstance.Endpoint.Port}/g" /usr/local/bin/provision_db_ei.sh
          bash /usr/local/bin/provision_db_ei.sh
  PuppetMasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 PuppetMaster Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
  WSO2EINode1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2EIAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2EISecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          #cloud-boothook
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          apt-get update
          apt install -y python-pip
          apt-get install -y puppet
          apt-get install -y nfs-common
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          export ProductVersion=6.4.0
          sed -i "s/Product_Version/6.4.0/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          export INSTANCEID=$(ec2metadata | grep -m 1 'instance-id:' | awk '{print $2}')
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s/REGION_NAME/${AWS::Region}/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          nohup /home/ubuntu/logstash-6.5.1/bin/logstash -f /home/ubuntu/logstash-6.5.1/logstash-sample.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          service puppet restart
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2EIEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 180
          export FACTER_profile=ei_integrator640
          puppet agent -vt
          if [ ! -d "/mnt/efs/deployment/server" ]; then
              mkdir -p /mnt/efs/deployment/server
              cp -r /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/deployment/server /mnt/efs/deployment
          fi
          rm -rf /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/deployment/server
          ln -s /mnt/efs/deployment/server /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/deployment/server
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/tenants /mnt/efs
          fi
          rm -rf /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/tenants
          ln -s /mnt/efs/tenants /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/tenants
          echo "${WSO2EIEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/bin/integrator.sh start
          ${CustomUserData}
          end=$((SECONDS+600))
          while [ $SECONDS -lt $end ] ; do
              wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
              if [ $? -eq "0" ] ; then
                /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EINode1AutoScalingGroup --region ${AWS::Region}
              fi
          done
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2EISecurityGroup
      - WSO2EILoadBalancer
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBInstance
      - PuppetMaster
  WSO2EINode1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2EINode1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2EIALBTargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2EIPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2EIInstance1
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: ei
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2EILoadBalancer
  WSO2EINode2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2EIAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2EISecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          #cloud-boothook
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          apt-get update
          apt install -y python-pip
          apt-get install -y puppet
          apt-get install -y nfs-common
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          export ProductVersion=6.4.0
          sed -i "s/Product_Version/6.4.0/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          export INSTANCEID=$(ec2metadata | grep -m 1 'instance-id:' | awk '{print $2}')
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          sed -i "s/REGION_NAME/${AWS::Region}/g" /home/ubuntu/logstash-6.5.1/logstash-sample.conf
          nohup /home/ubuntu/logstash-6.5.1/bin/logstash -f /home/ubuntu/logstash-6.5.1/logstash-sample.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          service puppet restart
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2EIEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 300
          export FACTER_profile=ei_integrator640
          puppet agent -vt
          if [ ! -d "/mnt/efs/deployment/server" ]; then
              mkdir -p /mnt/efs/deployment/server
              cp -r /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/deployment/server /mnt/efs/deployment
          fi
          rm -rf /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/deployment/server
          ln -s /mnt/efs/deployment/server /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/deployment/server
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/tenants /mnt/efs
          fi
          rm -rf /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/tenants
          ln -s /mnt/efs/tenants /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/repository/tenants
          echo "${WSO2EIEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          /usr/lib/wso2/wso2ei/6.4.0/wso2ei-6.4.0/bin/integrator.sh start
          end=$((SECONDS+600))
          while [ $SECONDS -lt $end ] ; do
              wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
              if [ $? -eq "0" ] ; then
                /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EINode2AutoScalingGroup --region ${AWS::Region}
              fi
          done
          ${CustomUserData}
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2EISecurityGroup
      - WSO2EILoadBalancer
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBInstance
      - PuppetMaster
  WSO2EINode2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2EINode2LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2EIALBTargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2EIPrivateSubnet2
      Tags:
        - Key: Name
          Value: WSO2EIInstance2
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: ei
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2EILoadBalancer
  WSO2EILoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 EI ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4100'
          ToPort: '4100'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4100'
          ToPort: '4100'
          CidrIp: 0.0.0.0/0
  WSO2EILoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: EI
      Scheme: internet-facing
      Subnets:
        - !Ref WSO2EIPublicSubnet1
        - !Ref WSO2EIPublicSubnet2
      SecurityGroups:
        - !Ref WSO2EILoadBalancerSecurityGroup
  WSO2EIALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /carbon/admin/login.jsp
      HealthCheckPort: 9443
      Matcher:
        HttpCode: 200
      Name: ei-carbon-9443
      Port: 9443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2EIVPC
      Tags:
      - Key: Name
        Value: ei
  WSO2EIALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EIALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2EILoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2EILoadBalancerSecurityGroup
Outputs:
  MgtConsoleUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - '/carbon'
    Description: Integrator Carbon Management Console URL
  CarbonServerUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - '/services'
    Description: Carbon Server URL
  ESBHttpUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - ':8280'
    Description: ESB HTTP URL
  ESBHttpsUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - ':8243'
    Description: ESB HTTPSURL
Parameters:
  AWSAccessKeyId:
    Type: String
  AWSAccessKeySecret:
    Type: String
  KeyPairName:
    Description: >-
      The private key used to log in to instances through SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A valid SSL certificate used for HTTPS
    Type: String
    MinLength: 1
  WSO2InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
    ConstraintDescription: Must be a valid EC2 instance type
  CustomUserData:
    Type: String
    Default: "echo"
  JDK:
    Type: String
    Default: "OPEN_JDK8"
    AllowedValues:
      - "OPEN_JDK8"
      - "ORACLE_JDK8"
  InternalPrepareForTest:
    Type: String
    Default: False
    AllowedValues:
      - False
      - True
  WUMPassword:
    Type: String
    Default: ""
    NoEcho: true
  WUMUsername:
    Type: String
    Default: ""
  DBUsername:
    Type: String
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Type: String
    MinLength: 8
    NoEcho: true
  ElasticSearchEndpoint:
    Type: String
  DBAllocationStorage:
    Description: Provide storage size in Gigabytes
    Type: Number
    Default: 20
  DBInstanceType:
    Type: String
    Default: db.t2.medium
    AllowedValues:
      - db.t2.medium
      - db.t2.large
      - db.t2.xlarge
      - db.t2.2xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
  DB:
    Type: String
    Default: MySQL-5.6
    AllowedValues:
      - MySQL-5.6
      - MySQL-5.7
  OperatingSystem:
    Type: String
    Default: Ubuntu1804
    AllowedValues:
      - Ubuntu1804
  LogArchiveS3Bucket:
    Type: String
    Default: ""
Mappings:
  WSO2PuppetMasterRegionMap:
    ap-southeast-2:
      Ubuntu1804: ami-04736a51961858ebf
    eu-west-1:
      Ubuntu1804: ami-0e83183b95e190afc
    us-east-1:
      Ubuntu1804: ami-0782bf8d5455e6ad0
    us-east-2:
      Ubuntu1804: ami-001ca894bac471a1b
    us-west-1:
      Ubuntu1804: ami-0089a017e2b6851a7
    us-west-2:
      Ubuntu1804: ami-009d089713dae1887
  WSO2EIAMIRegionMap:
    ap-southeast-2:
      Ubuntu1804: ami-01efc89b1e9c78f2f
    eu-west-1:
      Ubuntu1804: ami-0ef71f25fc5be6405
    us-east-1:
      Ubuntu1804: ami-071d17aa9be89c661
    us-east-2:
      Ubuntu1804: ami-073d3f02074c007e5
    us-west-1:
      Ubuntu1804: ami-01b4bf9be7d1fb0be
    us-west-2:
      Ubuntu1804: ami-09362e707f785f606

